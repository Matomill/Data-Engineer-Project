-- MySQL Script generated by MySQL Workbench
-- Sun 30 Apr 2023 09:53:28 PM -03
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema LittleLemonDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema LittleLemonDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `LittleLemonDB` ;
USE `LittleLemonDB` ;

-- -----------------------------------------------------
-- Table `LittleLemonDB`.`Bookings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`Bookings` (
  `BookingID` INT AUTO_INCREMENT NOT NULL,
  `BookingDate` DATE NOT NULL,
  `TableNumber` INT NOT NULL,
  PRIMARY KEY (`BookingID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`Customers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`Customers` (
  `CustomerID` INT AUTO_INCREMENT NOT NULL,
  `CustomerName` VARCHAR(45) NOT NULL,
  `Phone` VARCHAR(45) NOT NULL,
  `Email` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`CustomerID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`OrderDeliveryStatus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`OrderDeliveryStatus` (
  `DeliveryID` INT AUTO_INCREMENT NOT NULL,
  `DeliveryDate` DATE NOT NULL,
  `DaliveryStatus` VARCHAR(45) NOT NULL,
  `OrderID` INT NOT NULL,
  PRIMARY KEY (`DeliveryID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`Items`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`Items` (
  `ItemID` INT AUTO_INCREMENT NOT NULL,
  `Drinks` VARCHAR(45) NOT NULL,
  `Starters` VARCHAR(45) NOT NULL,
  `PrincipalDishes` VARCHAR(45) NOT NULL,
  `Courses` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ItemID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`Menu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`Menu` (
  `MenuID` INT AUTO_INCREMENT NOT NULL,
  `MenuName` VARCHAR(45) NOT NULL,
  `Cuisine` VARCHAR(45) NOT NULL,
  `ItemID` INT NOT NULL,
  PRIMARY KEY (`MenuID`),
  INDEX `fk_item_id_idx` (`ItemID` ASC) VISIBLE,
  CONSTRAINT `fk_item_id`
    FOREIGN KEY (`ItemID`)
    REFERENCES `LittleLemonDB`.`Items` (`ItemID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`Staff`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`Staff` (
  `EmployeeID` INT AUTO_INCREMENT NOT NULL,
  `EmployeeName` VARCHAR(95) NOT NULL,
  `PhoneNumber` VARCHAR(45) NOT NULL,
  `Email` VARCHAR(45) NOT NULL,
  `Role` VARCHAR(45) NOT NULL,
  `Salary` DECIMAL NOT NULL,
  `EmployeeAddress` VARCHAR(75) NOT NULL,
  PRIMARY KEY (`EmployeeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`Orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`Orders` (
  `OrderID` INT AUTO_INCREMENT NOT NULL,
  `OrderDate` DATE NOT NULL,
  `Quantity` INT NOT NULL,
  `TotalCost` DECIMAL NOT NULL,
  `BookingID` INT NOT NULL,
  `CustomerID` INT NOT NULL,
  `DaliveryID` INT NOT NULL,
  `MenuID` INT NOT NULL,
  `EmployeeID` INT NOT NULL,
  PRIMARY KEY (`OrderID`),
  FOREIGN KEY (`BookingID`)
  REFERENCES `LittleLemonDB`.`Bookings` (`BookingID`),
  FOREIGN KEY (`CustomerID`)
  REFERENCES `LittleLemonDB`.`Customers` (`CustomerID`),
  FOREIGN KEY (`DaliveryID`)
  REFERENCES `LittleLemonDB`.`OrderDeliveryStatus` (`DeliveryID`),
  FOREIGN KEY (`MenuID`)
  REFERENCES `LittleLemonDB`.`Menu` (`MenuID`),
  FOREIGN KEY (`EmployeeID`)
  REFERENCES `LittleLemonDB`.`Staff` (`EmployeeID`))
  
ENGINE = InnoDB
DEFAULT CHARACTER SET = armscii8;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -------------------------------------------------------
-- Create view - More than two orders.
----------------------------------------------------------

CREATE VIEW IF NOT EXISTS MoreThanTwoOrders AS
SELECT MenuName
FROM Menu
WHERE MenuID = ANY (SELECT MenuID FROM Orders WHERE Quantity > 2); 

-- -------------------------------------------------------
-- Create view - Orders with a cost grather than $150
----------------------------------------------------------

CREATE VIEW IF NOT EXISTS OrdersWithCostGratherThan AS
SELECT Customers.CustomerID, Customers.CustomerName, Orders.TotalCost, Menu.MenuName, Items.Courses
FROM Customers
INNER JOIN Orders
ON Customers.CustomerID = Orders.CustomerID
INNER JOIN Menu
ON Orders.MenuID = Menu.MenuID
INNER JOIN Items
ON Menu.ItemID = Items.ItemID
WHERE Orders.TotalCost > 150; 

-- ------------------------------------------------------
-- Create view - Orders with a quantity greater than 2
---------------------------------------------------------

CREATE VIEW IF NOT EXISTS OrdersView AS SELECT OrderID, Quantity, TotalCost FROM Orders WHERE Quantity > 2;

-- ------------------------------------------------------
-- Create Store Procedure to get the max quantity ordened
---------------------------------------------------------

CREATE PROCEDURE IF NOT EXISTS GetMaxQuantity()
SELECT Quantity AS Max_Quantity_in_Order
FROM Orders
ORDER BY Quantity LIMIT 1;

-- ------------------------------------------------------
-- Prepared Statement to get a specific order detail
---------------------------------------------------------

PREPARE GetOrderDetail FROM '
SELECT OrderID, Quantity, TotalCost
FROM Orders
WHERE OrderID = ?';

-- SET @id = [some value];
-- EXECUTE GetOrderDetails USING @id;

-- ------------------------------------------------------
-- Store Procedure to delete a record and show the confirmation
---------------------------------------------------------

DELETE PROCEDURE IF EXISTS CancelOrder;

DELIMITER //

CREATE PROCEDURE CancelOrder(INOUT cancelledOrder INT)
BEGIN
    DELETE FROM Orders WHERE OrderID = cancelledOrder;
    SELECT CONCAT("Order", OrderID, "Is Cancelled")
    INTO cancelledOrder
    FROM Orders
    WHERE OrderID = cancelledOrder;
END//
DELIMITER ; 
             